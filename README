*************************************************************************************
              MCMAS -- Model Checker for Multi-Agent Systems

       Copyright (C) 2007 2008
       Alessio Lomuscio, Hongyang Qu and Franco Raimondi
       This program is free software; you can redistribute it and/or modify
       it under the terms of the GNU General Public License as published by
       the Free Software Foundation; either version 2 of the License, or
       (at your option) any later version.
       This program is distributed in the hope that it will be useful,
       but WITHOUT ANY WARRANTY; without even the implied warranty of
       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
       GNU General Public License for more details.
  
Below is a copy of the GNU General Public License, which can also be obtained from
Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 
*************************************************************************************

Please see the documents available under the doc/ directory.
In particular:
- doc/installation_guide.pdf provides installation instructions;
- doc/manual.pdf provides a user manual.

Please contact mcmas@doc.ic.ac.uk for further information.

Questions for Alessio: 
- Obsvars/vars difference

Notes: 

TODO for encoding the evolution: 
- enum_value
- arithmetic_expression
- variable
- bool_value
- expression
- int_value
- laction


Different cases when encoding a logic_expression condition: 
(1) LHS is an action 
(2) LHS and RHS are variables
	(A) Bool
	(B) RangedInt 
	(C) Enumerate
(3) Either LHS or RHS has Bool value
(4) Either LHS or RHS has "enumerate" value
(5) Condition is arithmetic expression

On the vector "a": 
Each agent's action variables are contained in the vector a between indices action_index_begin and action_index_end. 
need to:
 - create the vector at the beginning (where it was before)
 - use it in encode_action


On Representing actions: 
Each agent is given a set of n Boolean variables to represent its set of actions. Each action is then represented by a unique bit vector of size n, assigning a value (true or false) to each variable.  


Encoding protocol: 
- disjunction of encodings for each protocol line
- a protocol line is a condition (boolean expression) C with a set of actions A. The encoding for the line is conjunction of the two encodings
- the encoding for C is the corresponding SDD (as condition is a variable), the encoding for A is the disjunction of the encoding for each action
- encoding for an action is the SDD corresponding to the bit vector associated to it (see above)

